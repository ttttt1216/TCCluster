from trajCluster.partition import approximate_trajectory_partitioning, segment_mdl_comp, rdp_trajectory_partitioning
from trajCluster.point import Point
from trajCluster.cluster import line_segment_clustering, representative_trajectory_generation

from matplotlib import pyplot as plt

if __name__ == "__main__":
    ts1 = [3459772.91000000,1352297.60000000, 3316587.23000000,1326976.16000000, 3186424.26000000,1303666.05000000, 3056225.41000000,1293120.80000000, 2938703.55000000,1284079.11000000, 2821938.88000000,1275540.01000000, 2705095.87000000,1279191.30000000, 2589768.73000000,1271548.00000000, 2451512.42000000,1274550.93000000, 2312889.13000000,1301049.28000000, 2173422.09000000,1362080.53000000, 2035146.26000000,1423045.43000000, 1875280.38000000,1494199.88000000, 1693902.14000000,1586959.49000000, 1515496.11000000,1657624.53000000, 1326784.84000000,1762005.73000000, 1118908.87000000,1866506.61000000, 956070.52000000,1973297.11000000, 816797.18000000,2048138.38000000, 710280.71000000,2124164.65000000, 594088.25000000,2222801.38000000, 531199.79000000,2311109.53000000, 500000.00000000,2421758.38000000, 386692.60000000,2466446.04000000, 314838.84000000,2489284.93000000, 232704.46000000,2501572.78000000, 139331.03000000,2470216.94000000]
    ts2 = [2380950.28000000,1640668.21000000, 2289583.91000000,1656963.33000000, 2209018.99000000,1685672.49000000, 2116226.42000000,1736468.77000000, 2033496.77000000,1810719.70000000, 1941181.11000000,1872747.48000000, 1873506.29000000,1902312.40000000, 1763495.13000000,1917985.81000000, 1676276.47000000,1924114.82000000, 1513439.33000000,1937892.85000000, 1394856.72000000,1943523.06000000, 1296723.29000000,1984064.34000000, 1240835.85000000,2048776.27000000, 1228925.56000000,2081754.29000000, 1206025.02000000,2125443.61000000, 1152770.79000000,2134604.43000000, 1109793.54000000,2155364.19000000, 1066936.43000000,2176199.06000000, 1055719.74000000,2198073.44000000, 1044868.19000000,2208847.57000000, 1034030.44000000,2219625.35000000, 1033690.80000000,2230725.28000000, 1022871.27000000,2241505.49000000, 1000619.20000000,2285269.76000000, 1020138.04000000,2330295.28000000, 1059935.87000000,2387176.14000000, 1110640.21000000,2422394.37000000, 1130509.62000000,2445432.93000000, 1139508.78000000,2479198.05000000, 1128260.79000000,2501003.33000000, 1096853.25000000,2510877.63000000, 1065500.23000000,2520806.92000000, 1035755.23000000,2486384.39000000, 1046861.37000000,2464540.03000000, 1067945.33000000,2454173.05000000, 1099422.64000000,2444219.16000000, 1140874.70000000,2445851.34000000, 1181381.90000000,2469838.04000000, 1260404.47000000,2551630.57000000, 1306488.61000000,2654617.74000000, 1319802.17000000,2778382.68000000, 1105889.54000000,3001114.13000000, 1040738.78000000,3120528.78000000, 977570.35000000,3217901.47000000, 936406.38000000,3271833.42000000, 885948.58000000,3325528.35000000, 835963.87000000,3379403.66000000, 737949.73000000,3465548.18000000, 688516.14000000,3564358.34000000]
    ts3 = [2334071.14000000,1937777.92000000, 2242844.22000000,1964485.37000000, 2153123.83000000,1979974.01000000, 2083873.72000000,2020197.75000000, 1994203.66000000,2047411.54000000, 1915020.09000000,2086953.17000000, 1836323.50000000,2126598.95000000, 1768016.29000000,2178368.49000000, 1699374.10000000,2241409.28000000, 1634187.70000000,2259590.76000000, 1538239.45000000,2264803.62000000, 1441998.93000000,2281684.42000000, 1358366.12000000,2266092.08000000, 1274748.16000000,2250956.82000000, 1192013.23000000,2214024.12000000, 1108660.59000000,2188693.87000000, 1067637.21000000,2153991.14000000, 1036689.00000000,2130827.25000000, 984562.39000000,2107169.90000000, 953183.00000000,2095278.40000000, 921773.32000000,2083448.12000000, 879549.06000000,2082544.29000000, 847891.26000000,2081929.21000000, 816426.86000000,2070291.42000000, 763504.20000000,2080551.51000000, 710659.25000000,2090953.98000000, 647361.64000000,2101413.68000000, 583999.14000000,2145282.29000000, 489526.48000000,2189352.57000000, 364090.00000000,2223077.35000000, 260283.60000000,2279573.11000000, 136079.80000000,2326134.46000000, 22834.22000000,2373417.24000000, -203097.39000000,2448507.28000000]
    ts4 = [1405073.17000000,1384935.69000000, 1294204.01000000,1426272.67000000, 1183022.77000000,1501222.07000000, 1061745.88000000,1576111.23000000, 930334.72000000,1662218.45000000, 800557.83000000,1704519.88000000, 714232.01000000,1747831.09000000, 628333.50000000,1780369.64000000, 564131.53000000,1791152.24000000, 532097.92000000,1768958.54000000, 500000.00000000,1746812.72000000, 435709.30000000,1735842.58000000, 414235.81000000,1724851.49000000, 382071.91000000,1724994.92000000, 349688.31000000,1691992.43000000, 328129.74000000,1681076.36000000, 252906.19000000,1681747.89000000, 188404.31000000,1682515.87000000, 80438.17000000,1662025.91000000, -16563.17000000,1663935.80000000, -135273.56000000,1666813.39000000, -233233.94000000,1647358.17000000, -341999.35000000,1639754.55000000, -386242.46000000,1618983.18000000, -462852.32000000,1610672.53000000, -526862.89000000,1646892.98000000, -635442.53000000,1663000.89000000, -735008.00000000,1645356.76000000, -804384.36000000,1581130.06000000]
    ts5 = [1136122.97000000,2000504.95000000, 1074263.41000000,1931915.55000000, 978892.68000000,1907249.65000000, 872546.14000000,1893966.44000000, 776236.84000000,1925681.06000000, 627325.81000000,1946335.25000000, 478792.25000000,1957006.56000000, 362214.28000000,1968536.36000000, 224836.18000000,2003189.84000000, 108982.12000000,2038430.00000000, 3130.57000000,2040883.80000000, -191623.49000000,1935573.70000000, -352008.78000000,1941676.41000000, -512319.25000000,1960272.17000000]

    traj1 = [Point(ts1[i:i+2][0], ts1[i:i+2][1]) for i in range(0, len(ts1), 2)]
    traj2 = [Point(ts2[i:i+2][0], ts2[i:i+2][1]) for i in range(0, len(ts2), 2)]
    traj3 = [Point(ts3[i:i+2][0], ts3[i:i+2][1]) for i in range(0, len(ts3), 2)]
    traj4 = [Point(ts4[i:i+2][0], ts4[i:i+2][1]) for i in range(0, len(ts4), 2)]
    traj5 = [Point(ts5[i:i+2][0], ts5[i:i+2][1]) for i in range(0, len(ts5), 2)]

    # part 1: partition theta越大轨迹的压缩率越大
    # 感觉theta=35的时候效果还挺不错的
    part1 = approximate_trajectory_partitioning(traj1, theta=35.0, traj_id=1)
    part2 = approximate_trajectory_partitioning(traj2, theta=35.0, traj_id=2)
    part3 = approximate_trajectory_partitioning(traj3, theta=35.0, traj_id=3)
    part4 = approximate_trajectory_partitioning(traj4, theta=35.0, traj_id=4)
    part5 = approximate_trajectory_partitioning(traj5, theta=35.0, traj_id=5)

    all_segs = part1 + part2 + part3 + part4 + part5
    print(len(all_segs))
    norm_cluster, remove_cluster = line_segment_clustering(all_segs, min_lines=1, epsilon=650000.0)
    for k, v in remove_cluster.items():
        print("remove cluster: the cluster %d, the segment number %d" % (k, len(v)))

    cluster_s_x, cluster_s_y = [], []
    for k, v in norm_cluster.items():
        cluster_s_x.extend([s.start.x for s in v])
        cluster_s_x.extend([s.end.x for s in v])

        cluster_s_y.extend([s.start.y for s in v])
        cluster_s_y.extend([s.end.y for s in v])
        print("using cluster: the cluster %d, the segment number %d" % (k, len(v)))

    source_line_x_1 = [p.x for p in traj1]
    source_line_y_1 = [p.y for p in traj1]

    source_line_x_2 = [p.x for p in traj2]
    source_line_y_2 = [p.y for p in traj2]

    source_line_x_3 = [p.x for p in traj3]
    source_line_y_3 = [p.y for p in traj3]

    source_line_x_4 = [p.x for p in traj4]
    source_line_y_4 = [p.y for p in traj4]

    source_line_x_5 = [p.x for p in traj5]
    source_line_y_5 = [p.y for p in traj5]


    fig = plt.figure(figsize=(9, 6))
    ax = fig.add_subplot(111)
    ax.plot(source_line_x_1, source_line_y_1, 'g--', lw=2.0, label="trajectory 1")
    ax.scatter(source_line_x_1, source_line_y_1, c='g', alpha=0.5)
    ax.plot(source_line_x_2, source_line_y_2, 'r--', lw=2.0, label="trajectory 2")
    ax.scatter(source_line_x_2, source_line_y_2, c='r', alpha=0.5)
    ax.plot(source_line_x_3, source_line_y_3, 'b--', lw=2.0, label="trajectory 3")
    ax.scatter(source_line_x_3, source_line_y_3, c='b', alpha=0.5)
    ax.plot(source_line_x_4, source_line_y_4, 'y--', lw=2.0, label="trajectory 4")
    ax.scatter(source_line_x_4, source_line_y_4, c='y', alpha=0.5)
    ax.plot(source_line_x_5, source_line_y_5, 'c--', lw=2.0, label="trajectory 5")
    ax.scatter(source_line_x_5, source_line_y_5, c='c', alpha=0.5)

    for k, v in norm_cluster.items():
        for s in v:
            _x = [s.start.x, s.end.x]
            _y = [s.start.y, s.end.y]
            if s.traj_id == 1:
                ax.plot(_x, _y, c='k', lw=3.0, alpha=0.7)
            elif s.traj_id == 2:
                ax.plot(_x, _y, c='c', lw=3.0, alpha=0.7)
            elif s.traj_id == 3:
                ax.plot(_x, _y, c='m', lw=3.0, alpha=0.7)
            else:
                ax.plot(_x, _y, c='r', lw=3.0, alpha=0.7)
    ax.scatter(cluster_s_x, cluster_s_y, c='k', alpha=0.5, s=80, label="cluster")

    main_traj_dict = representative_trajectory_generation(norm_cluster, min_lines=2, min_dist=1.0)
    for c, v in main_traj_dict.items():
        v_x = [p.x for p in v]
        v_y = [p.y for p in v]
        ax.plot(v_x, v_y, 'r-', lw=4.0, label="cluster_%d_main_trajectory" % c)


    ax.legend()
    plt.savefig("./figures/trajectory-major.png", dpi=400)
    plt.show()

